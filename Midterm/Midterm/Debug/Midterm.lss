
Midterm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00000370  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001a8  008001a8  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8e  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079b  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000335  00000000  00000000  00002121  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002456  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3a       	cpi	r26, 0xA8	; 168
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ea       	ldi	r26, 0xA8	; 168
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3a       	cpi	r26, 0xAE	; 174
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  9e:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
}
}


ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	27 97       	sbiw	r28, 0x07	; 7
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61
volatile unsigned int j=0;
  d6:	1a 82       	std	Y+2, r1	; 0x02
  d8:	19 82       	std	Y+1, r1	; 0x01
char temp[5];

ADCvalue = (ADCH << 1); //Shifts the value left to one place
  da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  de:	88 0f       	add	r24, r24
  e0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <ADCvalue>

itoa(ADCvalue, temp, 10);
  e4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <ADCvalue>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	be 01       	movw	r22, r28
  ec:	6d 5f       	subi	r22, 0xFD	; 253
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 81 01 	call	0x302	; 0x302 <__itoa_ncheck>

while (j<5) {
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	05 97       	sbiw	r24, 0x05	; 5
  fc:	b8 f4       	brcc	.+46     	; 0x12c <__vector_21+0x86>
ADCtemp[j] = temp[j];
  fe:	e9 81       	ldd	r30, Y+1	; 0x01
 100:	fa 81       	ldd	r31, Y+2	; 0x02
 102:	a9 81       	ldd	r26, Y+1	; 0x01
 104:	ba 81       	ldd	r27, Y+2	; 0x02
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	8c 0f       	add	r24, r28
 10c:	9d 1f       	adc	r25, r29
 10e:	a8 0f       	add	r26, r24
 110:	b9 1f       	adc	r27, r25
 112:	8c 91       	ld	r24, X
 114:	e8 55       	subi	r30, 0x58	; 88
 116:	fe 4f       	sbci	r31, 0xFE	; 254
 118:	80 83       	st	Z, r24
j++;
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	89 83       	std	Y+1, r24	; 0x01

ADCvalue = (ADCH << 1); //Shifts the value left to one place

itoa(ADCvalue, temp, 10);

while (j<5) {
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	05 97       	sbiw	r24, 0x05	; 5
 12a:	48 f3       	brcs	.-46     	; 0xfe <__vector_21+0x58>
ADCtemp[j] = temp[j];
j++;
}
}
 12c:	27 96       	adiw	r28, 0x07	; 7
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <send_AT>:


void send_AT(volatile unsigned char c[]) {
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	00 d0       	rcall	.+0      	; 0x164 <send_AT+0x6>
 164:	00 d0       	rcall	.+0      	; 0x166 <send_AT+0x8>
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	ac 01       	movw	r20, r24
volatile unsigned int i=0, j=0;
 16c:	1a 82       	std	Y+2, r1	; 0x02
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	1c 82       	std	Y+4, r1	; 0x04
 172:	1b 82       	std	Y+3, r1	; 0x03

j = 0; //initialize counter
 174:	1c 82       	std	Y+4, r1	; 0x04
 176:	1b 82       	std	Y+3, r1	; 0x03

while (c[j] != 0x00) { //while not at end of string
 178:	eb 81       	ldd	r30, Y+3	; 0x03
 17a:	fc 81       	ldd	r31, Y+4	; 0x04
 17c:	e8 0f       	add	r30, r24
 17e:	f9 1f       	adc	r31, r25
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	69 f0       	breq	.+26     	; 0x1a0 <send_AT+0x42>
j++;
 186:	2b 81       	ldd	r18, Y+3	; 0x03
 188:	3c 81       	ldd	r19, Y+4	; 0x04
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
 18e:	3c 83       	std	Y+4, r19	; 0x04
 190:	2b 83       	std	Y+3, r18	; 0x03
void send_AT(volatile unsigned char c[]) {
volatile unsigned int i=0, j=0;

j = 0; //initialize counter

while (c[j] != 0x00) { //while not at end of string
 192:	eb 81       	ldd	r30, Y+3	; 0x03
 194:	fc 81       	ldd	r31, Y+4	; 0x04
 196:	e4 0f       	add	r30, r20
 198:	f5 1f       	adc	r31, r21
 19a:	80 81       	ld	r24, Z
 19c:	81 11       	cpse	r24, r1
 19e:	f3 cf       	rjmp	.-26     	; 0x186 <send_AT+0x28>
j++;
}

while (i<j) {
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	3a 81       	ldd	r19, Y+2	; 0x02
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	28 17       	cp	r18, r24
 1aa:	39 07       	cpc	r19, r25
 1ac:	d8 f4       	brcc	.+54     	; 0x1e4 <send_AT+0x86>
while(!(UCSR0A & (1 << UDRE0))); //If UDRE0 is 1, buffer is empty & ready to be written to
 1ae:	e0 ec       	ldi	r30, 0xC0	; 192
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
UDR0 = c[i];
 1b2:	66 ec       	ldi	r22, 0xC6	; 198
 1b4:	70 e0       	ldi	r23, 0x00	; 0
while (c[j] != 0x00) { //while not at end of string
j++;
}

while (i<j) {
while(!(UCSR0A & (1 << UDRE0))); //If UDRE0 is 1, buffer is empty & ready to be written to
 1b6:	90 81       	ld	r25, Z
 1b8:	95 ff       	sbrs	r25, 5
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <send_AT+0x58>
UDR0 = c[i];
 1bc:	a9 81       	ldd	r26, Y+1	; 0x01
 1be:	ba 81       	ldd	r27, Y+2	; 0x02
 1c0:	a4 0f       	add	r26, r20
 1c2:	b5 1f       	adc	r27, r21
 1c4:	8c 91       	ld	r24, X
 1c6:	db 01       	movw	r26, r22
 1c8:	8c 93       	st	X, r24
i++;
 1ca:	29 81       	ldd	r18, Y+1	; 0x01
 1cc:	3a 81       	ldd	r19, Y+2	; 0x02
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	3a 83       	std	Y+2, r19	; 0x02
 1d4:	29 83       	std	Y+1, r18	; 0x01

while (c[j] != 0x00) { //while not at end of string
j++;
}

while (i<j) {
 1d6:	29 81       	ldd	r18, Y+1	; 0x01
 1d8:	3a 81       	ldd	r19, Y+2	; 0x02
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	9c 81       	ldd	r25, Y+4	; 0x04
 1de:	28 17       	cp	r18, r24
 1e0:	39 07       	cpc	r19, r25
 1e2:	48 f3       	brcs	.-46     	; 0x1b6 <send_AT+0x58>
while(!(UCSR0A & (1 << UDRE0))); //If UDRE0 is 1, buffer is empty & ready to be written to
UDR0 = c[i];
i++;
}
}
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <main>:
void send_AT (volatile unsigned char c[]); //sends the arrays to this function

int main( void )
{
/* ADC */
ADMUX = 0; // use ADC0
 1f2:	ec e7       	ldi	r30, 0x7C	; 124
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	10 82       	st	Z, r1
ADMUX |= (1 << REFS0); // use AVcc as the reference
 1f8:	80 81       	ld	r24, Z
 1fa:	80 64       	ori	r24, 0x40	; 64
 1fc:	80 83       	st	Z, r24
ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
 1fe:	80 81       	ld	r24, Z
 200:	80 62       	ori	r24, 0x20	; 32
 202:	80 83       	st	Z, r24

ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
 204:	ea e7       	ldi	r30, 0x7A	; 122
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	80 83       	st	Z, r24
ADCSRB = 0; // 0 for free running mode
 20e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
ADCSRA |= (1 << ADEN); // Enable the ADC
 212:	80 81       	ld	r24, Z
 214:	80 68       	ori	r24, 0x80	; 128
 216:	80 83       	st	Z, r24
ADCSRA |= (1 << ADIE); // Enable Interrupts
 218:	80 81       	ld	r24, Z
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	80 83       	st	Z, r24
ADCSRA |= (1 << ADSC); // Start the ADC conversion
 21e:	80 81       	ld	r24, Z
 220:	80 64       	ori	r24, 0x40	; 64
 222:	80 83       	st	Z, r24
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescaler for 16Mhz
 224:	80 81       	ld	r24, Z
 226:	87 60       	ori	r24, 0x07	; 7
 228:	80 83       	st	Z, r24


/* UART */
UBRR0H = ((MYUBRR) >> 8); //Shift to store the upper 8 bits
 22a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
UBRR0L = MYUBRR; //Store lower bits
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

UCSR0A |= (1 << U2X0); //Double the USART transmission speed
 234:	e0 ec       	ldi	r30, 0xC0	; 192
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	80 83       	st	Z, r24
UCSR0B |= (1 << TXEN0); // Enable transmitter
 23e:	e1 ec       	ldi	r30, 0xC1	; 193
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	88 60       	ori	r24, 0x08	; 8
 246:	80 83       	st	Z, r24
UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8data, 1 stop, no parity bit
 248:	e2 ec       	ldi	r30, 0xC2	; 194
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	86 60       	ori	r24, 0x06	; 6
 250:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	2f e3       	ldi	r18, 0x3F	; 63
 254:	8d e0       	ldi	r24, 0x0D	; 13
 256:	93 e0       	ldi	r25, 0x03	; 3
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x66>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x70>
 262:	00 00       	nop

_delay_ms(1000);
send_AT(CWMODE);
 264:	8a e9       	ldi	r24, 0x9A	; 154
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 af 00 	call	0x15e	; 0x15e <send_AT>
 26c:	2f e3       	ldi	r18, 0x3F	; 63
 26e:	8d e0       	ldi	r24, 0x0D	; 13
 270:	93 e0       	ldi	r25, 0x03	; 3
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x80>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x8a>
 27c:	00 00       	nop

_delay_ms(1000);
send_AT(WIFI);
 27e:	85 e7       	ldi	r24, 0x75	; 117
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 af 00 	call	0x15e	; 0x15e <send_AT>
 286:	2f e7       	ldi	r18, 0x7F	; 127
 288:	8a e1       	ldi	r24, 0x1A	; 26
 28a:	96 e0       	ldi	r25, 0x06	; 6
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x9a>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0xa4>
 296:	00 00       	nop

_delay_ms(2000);
send_AT(ENABLE);
 298:	87 e6       	ldi	r24, 0x67	; 103
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 af 00 	call	0x15e	; 0x15e <send_AT>

sei();
 2a0:	78 94       	sei
 2a2:	2f e3       	ldi	r18, 0x3F	; 63
 2a4:	8d e0       	ldi	r24, 0x0D	; 13
 2a6:	93 e0       	ldi	r25, 0x03	; 3
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0xb6>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0xc0>
 2b2:	00 00       	nop

while(1)
{
_delay_ms(1000);
send_AT(CIPSTART); //Connect to thingspeak, port 80
 2b4:	8e e3       	ldi	r24, 0x3E	; 62
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 af 00 	call	0x15e	; 0x15e <send_AT>
 2bc:	2f e3       	ldi	r18, 0x3F	; 63
 2be:	8d e0       	ldi	r24, 0x0D	; 13
 2c0:	93 e0       	ldi	r25, 0x03	; 3
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0xd0>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0xda>
 2cc:	00 00       	nop

_delay_ms(1000);
send_AT(CIPSEND);
 2ce:	8e e2       	ldi	r24, 0x2E	; 46
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 af 00 	call	0x15e	; 0x15e <send_AT>
 2d6:	2f e3       	ldi	r18, 0x3F	; 63
 2d8:	8d e0       	ldi	r24, 0x0D	; 13
 2da:	93 e0       	ldi	r25, 0x03	; 3
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0xea>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0xf4>
 2e6:	00 00       	nop

_delay_ms(1000);
send_AT(SEND_DATA);
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 af 00 	call	0x15e	; 0x15e <send_AT>

send_AT(ADCtemp); //Sends the temperature data
 2f0:	88 ea       	ldi	r24, 0xA8	; 168
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 af 00 	call	0x15e	; 0x15e <send_AT>

send_AT(PAUSE); //A break in the data display
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 af 00 	call	0x15e	; 0x15e <send_AT>
 300:	d0 cf       	rjmp	.-96     	; 0x2a2 <main+0xb0>

00000302 <__itoa_ncheck>:
 302:	bb 27       	eor	r27, r27
 304:	4a 30       	cpi	r20, 0x0A	; 10
 306:	31 f4       	brne	.+12     	; 0x314 <__itoa_ncheck+0x12>
 308:	99 23       	and	r25, r25
 30a:	22 f4       	brpl	.+8      	; 0x314 <__itoa_ncheck+0x12>
 30c:	bd e2       	ldi	r27, 0x2D	; 45
 30e:	90 95       	com	r25
 310:	81 95       	neg	r24
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__utoa_common>

00000318 <__utoa_ncheck>:
 318:	bb 27       	eor	r27, r27

0000031a <__utoa_common>:
 31a:	fb 01       	movw	r30, r22
 31c:	55 27       	eor	r21, r21
 31e:	aa 27       	eor	r26, r26
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	aa 1f       	adc	r26, r26
 326:	a4 17       	cp	r26, r20
 328:	10 f0       	brcs	.+4      	; 0x32e <__utoa_common+0x14>
 32a:	a4 1b       	sub	r26, r20
 32c:	83 95       	inc	r24
 32e:	50 51       	subi	r21, 0x10	; 16
 330:	b9 f7       	brne	.-18     	; 0x320 <__utoa_common+0x6>
 332:	a0 5d       	subi	r26, 0xD0	; 208
 334:	aa 33       	cpi	r26, 0x3A	; 58
 336:	08 f0       	brcs	.+2      	; 0x33a <__utoa_common+0x20>
 338:	a9 5d       	subi	r26, 0xD9	; 217
 33a:	a1 93       	st	Z+, r26
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	79 f7       	brne	.-34     	; 0x31e <__utoa_common+0x4>
 340:	b1 11       	cpse	r27, r1
 342:	b1 93       	st	Z+, r27
 344:	11 92       	st	Z+, r1
 346:	cb 01       	movw	r24, r22
 348:	0c 94 a6 01 	jmp	0x34c	; 0x34c <strrev>

0000034c <strrev>:
 34c:	dc 01       	movw	r26, r24
 34e:	fc 01       	movw	r30, r24
 350:	67 2f       	mov	r22, r23
 352:	71 91       	ld	r23, Z+
 354:	77 23       	and	r23, r23
 356:	e1 f7       	brne	.-8      	; 0x350 <strrev+0x4>
 358:	32 97       	sbiw	r30, 0x02	; 2
 35a:	04 c0       	rjmp	.+8      	; 0x364 <strrev+0x18>
 35c:	7c 91       	ld	r23, X
 35e:	6d 93       	st	X+, r22
 360:	70 83       	st	Z, r23
 362:	62 91       	ld	r22, -Z
 364:	ae 17       	cp	r26, r30
 366:	bf 07       	cpc	r27, r31
 368:	c8 f3       	brcs	.-14     	; 0x35c <strrev+0x10>
 36a:	08 95       	ret

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
