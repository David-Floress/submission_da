
DA4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000712  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065a  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ce  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000365  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  88:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer_init>:
}


void timer_init(void)
{
	DDRB = 0x0F;						//Sets the lower bits of portb as outputs
  90:	8f e0       	ldi	r24, 0x0F	; 15
  92:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;							//PortC is as an input
  94:	17 b8       	out	0x07, r1	; 7
	PORTB = 0;							//Turns off all PB5 initially
  96:	15 b8       	out	0x05, r1	; 5
	
	TCCR1B = (1<< WGM12) | (1<<CS11);	//Prescalar = 8
  98:	8a e0       	ldi	r24, 0x0A	; 10
  9a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  9e:	08 95       	ret

000000a0 <ADC_init>:
}
void ADC_init(void)
{
	// Analog to digital converter initialization
	DIDR0 = 0x1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//right justified data
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|	//system clock used for ADC
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	87 68       	ori	r24, 0x87	; 135
  b4:	80 83       	st	Z, r24
	(1<<ADPS1)|(1<<ADPS0);				//free running
	ADCSRB = 0x0;
  b6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  ba:	08 95       	ret

000000bc <main>:
volatile unsigned int ADCVal;

int main(void)
{
	int period;
	timer_init();
  bc:	0e 94 48 00 	call	0x90	; 0x90 <timer_init>
	ADC_init();
  c0:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_init>
	
	while(1)
	{
		ADCSRA |= (1<< ADSC);					//starts the conversion
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);			//waits for the conversion
		ADCVal = ADC & 0x03FF;					//takes right 10bits of ADC register
  c8:	c8 e7       	ldi	r28, 0x78	; 120
  ca:	d0 e0       	ldi	r29, 0x00	; 0
		OCR1A = 10*ADCVal;						//Duty Cycle
  cc:	a8 e8       	ldi	r26, 0x88	; 136
  ce:	b0 e0       	ldi	r27, 0x00	; 0
		
		PORTB = 0x09;
  d0:	79 e0       	ldi	r23, 0x09	; 9
		while (!(TIFR1 & (1<<OCF1A)));
		TIFR1 |= (1<<OCF1A);
		PORTB = 0x03;
  d2:	63 e0       	ldi	r22, 0x03	; 3
		while (!(TIFR1 & (1<<OCF1A)));
		TIFR1 |= (1<<OCF1A);
		PORTB = 0x06;
  d4:	56 e0       	ldi	r21, 0x06	; 6
		while (!(TIFR1 & (1<<OCF1A)));
		TIFR1 |= (1<<OCF1A);
		PORTB = 0x0C;
  d6:	4c e0       	ldi	r20, 0x0C	; 12
	timer_init();
	ADC_init();
	
	while(1)
	{
		ADCSRA |= (1<< ADSC);					//starts the conversion
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);			//waits for the conversion
  de:	80 81       	ld	r24, Z
  e0:	84 ff       	sbrs	r24, 4
  e2:	fd cf       	rjmp	.-6      	; 0xde <main+0x22>
		ADCVal = ADC & 0x03FF;					//takes right 10bits of ADC register
  e4:	88 81       	ld	r24, Y
  e6:	99 81       	ldd	r25, Y+1	; 0x01
  e8:	93 70       	andi	r25, 0x03	; 3
  ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		OCR1A = 10*ADCVal;						//Duty Cycle
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  fa:	9c 01       	movw	r18, r24
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	82 0f       	add	r24, r18
 10e:	93 1f       	adc	r25, r19
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	9c 93       	st	X, r25
 114:	8e 93       	st	-X, r24
		
		PORTB = 0x09;
 116:	75 b9       	out	0x05, r23	; 5
		while (!(TIFR1 & (1<<OCF1A)));
 118:	b1 9b       	sbis	0x16, 1	; 22
 11a:	fe cf       	rjmp	.-4      	; 0x118 <main+0x5c>
		TIFR1 |= (1<<OCF1A);
 11c:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x03;
 11e:	65 b9       	out	0x05, r22	; 5
		while (!(TIFR1 & (1<<OCF1A)));
 120:	b1 9b       	sbis	0x16, 1	; 22
 122:	fe cf       	rjmp	.-4      	; 0x120 <main+0x64>
		TIFR1 |= (1<<OCF1A);
 124:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x06;
 126:	55 b9       	out	0x05, r21	; 5
		while (!(TIFR1 & (1<<OCF1A)));
 128:	b1 9b       	sbis	0x16, 1	; 22
 12a:	fe cf       	rjmp	.-4      	; 0x128 <main+0x6c>
		TIFR1 |= (1<<OCF1A);
 12c:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x0C;
 12e:	45 b9       	out	0x05, r20	; 5
		while (!(TIFR1 & (1<<OCF1A)));
 130:	b1 9b       	sbis	0x16, 1	; 22
 132:	fe cf       	rjmp	.-4      	; 0x130 <main+0x74>
		TIFR1 |= (1<<OCF1A);
 134:	b1 9a       	sbi	0x16, 1	; 22
	}
 136:	d0 cf       	rjmp	.-96     	; 0xd8 <main+0x1c>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
