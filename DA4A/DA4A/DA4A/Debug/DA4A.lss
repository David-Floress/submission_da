
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000795  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000327  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bd  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c5  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  88:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_4>:
	{
	}
}

ISR(PCINT1_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
	if(!(PINC & (1 << PINC1))) //Button pressed
  a6:	31 99       	sbic	0x06, 1	; 6
  a8:	40 c0       	rjmp	.+128    	; 0x12a <__vector_4+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	80 e7       	ldi	r24, 0x70	; 112
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <__vector_4+0x20>
  b8:	00 c0       	rjmp	.+0      	; 0xba <__vector_4+0x2a>
  ba:	00 00       	nop
	{
		_delay_ms(50); // Debounce button
		while(!(PINC & (1 << PINC1))); // Checks if button was pressed
  bc:	31 9b       	sbis	0x06, 1	; 6
  be:	fe cf       	rjmp	.-4      	; 0xbc <__vector_4+0x2c>
		if(motor) //Start the motor
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	88 23       	and	r24, r24
  c6:	31 f1       	breq	.+76     	; 0x114 <__vector_4+0x84>
		{
			PORTB |= (1 << PORTB1);
  c8:	29 9a       	sbi	0x05, 1	; 5
			// Turns on the motor
			ADCSRA |= (1 << ADSC);
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
			// Starts conversion
			while((ADCSRA&(1<<ADIF))==0);
  d4:	80 81       	ld	r24, Z
  d6:	84 ff       	sbrs	r24, 4
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <__vector_4+0x44>
			// Waits for conversion
			ADCVal = ADC & 0x03FF;
  da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e2:	93 70       	andi	r25, 0x03	; 3
  e4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ADCVal+0x1>
  e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCVal>
			// Takes the right 10-bits of ADC register
			OCR1A = 10*ADCVal;
  ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ADCVal>
  f0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ADCVal+0x1>
  f4:	9c 01       	movw	r18, r24
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	82 0f       	add	r24, r18
 108:	93 1f       	adc	r25, r19
 10a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 112:	05 c0       	rjmp	.+10     	; 0x11e <__vector_4+0x8e>
			// OCR1A value for duty cycle
		}
		else if(!motor)
		//Stop the motor
		{
			OCR1A = 0;
 114:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 118:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			// Reset register
			PORTB &= ~(1 << PORTB1);
 11c:	29 98       	cbi	0x05, 1	; 5
			// Turns off motor
		}
		motor ^= 1; // Remembers button state
 11e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	89 27       	eor	r24, r25
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <timer_int>:

void timer_int(void)
{
	//Port directions
	DDRB = (1<<1);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	84 b9       	out	0x04, r24	; 4
	// PB.1-2 (OC1A & OC1B) as output to generate PWM
	DDRB |= (1<<5);
 144:	25 9a       	sbi	0x04, 5	; 4
	// PB.1-2 (OC1A & OC1B) as output to generate PWM
	DDRC = 0;
 146:	17 b8       	out	0x07, r1	; 7
	// PORTC as input
	PORTB = 0;
 148:	15 b8       	out	0x05, r1	; 5
	// Initially turns off all PB5:0
	//Timer1
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) |
 14a:	e0 e8       	ldi	r30, 0x80	; 128
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	90 81       	ld	r25, Z
 150:	92 6a       	ori	r25, 0xA2	; 162
 152:	90 83       	st	Z, r25
	(1 << WGM11);
	// enable PWM for OC1A & OC1B, Fast PWM, Non-inverted mode
	TCCR1B |= (1 << WGM13) | (1 << WGM12) |
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	90 81       	ld	r25, Z
 15a:	9a 61       	ori	r25, 0x1A	; 26
 15c:	90 83       	st	Z, r25
	(1 << CS11);
	// Prescaler = 8
	ICR1 = 9999;
 15e:	2f e0       	ldi	r18, 0x0F	; 15
 160:	37 e2       	ldi	r19, 0x27	; 39
 162:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 166:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	// Timer1 TOP
	//Interrupt Settings
	PORTC |= (1 << PORTC1);
 16a:	41 9a       	sbi	0x08, 1	; 8
	
	PCICR = (1 << PCIE1);
 16c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	
	PCMSK1 = (1 << PCINT9);
 170:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	
	sei();  // Enable global interrupts
 174:	78 94       	sei
 176:	08 95       	ret

00000178 <ADC_int>:
}

void ADC_int (void)
{
	// ADC initialization
	DIDR0 = 0x1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	// disable digital input on ADC0 pin
	ADMUX = (1<<REFS0);
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Reference = Aref, ADC0 (PC.0) used as analog input
	// right-justified data
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) |
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	87 68       	ori	r24, 0x87	; 135
 18c:	80 83       	st	Z, r24
	(1<<ADPS1) | (1<<ADPS0);
	// enable ADC, system clock used for ADC
	ADCSRB = 0x0;
 18e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 192:	08 95       	ret

00000194 <main>:

void timer_int (void); // Function declaration for timer
void ADC_int (void); // Function declaration for ADC

int main(void){
	timer_int(); // Initializes timer
 194:	0e 94 a0 00 	call	0x140	; 0x140 <timer_int>
	ADC_int(); // Initializes ADC
 198:	0e 94 bc 00 	call	0x178	; 0x178 <ADC_int>
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x8>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
